// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;

namespace IMP.Repository.Models;

public partial class InfertilityTreatmentDBContext : DbContext
{
    public InfertilityTreatmentDBContext()
    {
    }

    public InfertilityTreatmentDBContext(DbContextOptions<InfertilityTreatmentDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<BlogPost> BlogPosts { get; set; }

    public virtual DbSet<Doctor> Doctors { get; set; }

    public virtual DbSet<DoctorExpertField> DoctorExpertFields { get; set; }

    public virtual DbSet<DoctorSchedule> DoctorSchedules { get; set; }

    public virtual DbSet<ExpertField> ExpertFields { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<Patient> Patients { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<StepDetail> StepDetails { get; set; }

    public virtual DbSet<Treatment> Treatments { get; set; }

    public virtual DbSet<TreatmentBooking> TreatmentBookings { get; set; }

    public virtual DbSet<TreatmentRecord> TreatmentRecords { get; set; }

    public virtual DbSet<TreatmentStep> TreatmentSteps { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Appointment>(entity =>
        {
            entity.ToTable("Appointment");

            entity.Property(e => e.AppointmentId).ValueGeneratedNever();
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();

            entity.HasOne(d => d.Booking).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.BookingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Appointment_TreatmentBooking");
        });

        modelBuilder.Entity<BlogPost>(entity =>
        {
            entity.ToTable("BlogPost");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.PostTitle)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();

            entity.HasOne(d => d.Doctor).WithMany(p => p.BlogPosts)
                .HasForeignKey(d => d.DoctorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BlogPost_Doctor");
        });

        modelBuilder.Entity<Doctor>(entity =>
        {
            entity.ToTable("Doctor");

            entity.Property(e => e.DoctorId).ValueGeneratedNever();
            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.Degree).HasMaxLength(255);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Gender)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneNumber).HasMaxLength(20);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();

            entity.HasOne(d => d.DoctorNavigation).WithOne(p => p.Doctor)
                .HasForeignKey<Doctor>(d => d.DoctorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Doctor_User");
        });

        modelBuilder.Entity<DoctorExpertField>(entity =>
        {
            entity.HasKey(e => e.DoctorId);

            entity.ToTable("DoctorExpertField");

            entity.Property(e => e.DoctorId).ValueGeneratedNever();

            entity.HasOne(d => d.Doctor).WithOne(p => p.DoctorExpertField)
                .HasForeignKey<DoctorExpertField>(d => d.DoctorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DoctorExpertField_Doctor");

            entity.HasOne(d => d.ExpertField).WithMany(p => p.DoctorExpertFields)
                .HasForeignKey(d => d.ExpertFieldId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DoctorExpertField_ExpertField");
        });

        modelBuilder.Entity<DoctorSchedule>(entity =>
        {
            entity.HasKey(e => e.DoctorId);

            entity.ToTable("DoctorSchedule");

            entity.Property(e => e.DoctorId).ValueGeneratedNever();

            entity.HasOne(d => d.Doctor).WithOne(p => p.DoctorSchedule)
                .HasForeignKey<DoctorSchedule>(d => d.DoctorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DoctorSchedule_Doctor");
        });

        modelBuilder.Entity<ExpertField>(entity =>
        {
            entity.ToTable("ExpertField");

            entity.Property(e => e.ExpertFieldId).ValueGeneratedNever();
            entity.Property(e => e.ExpertFieldName)
                .IsRequired()
                .HasMaxLength(150);
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasKey(e => new { e.PatientId, e.BookingId, e.TreatmentId });

            entity.ToTable("Feedback");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.TreatmentComment).HasMaxLength(255);

            entity.HasOne(d => d.Booking).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.BookingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Feedback_TreatmentBooking");
        });

        modelBuilder.Entity<Patient>(entity =>
        {
            entity.ToTable("Patient");

            entity.Property(e => e.PatientId).ValueGeneratedNever();
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Gender)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneNumber).HasMaxLength(20);

            entity.HasOne(d => d.PatientNavigation).WithOne(p => p.Patient)
                .HasForeignKey<Patient>(d => d.PatientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Patient_User");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.ToTable("Role");

            entity.Property(e => e.RoleName)
                .HasMaxLength(30)
                .IsFixedLength();
        });

        modelBuilder.Entity<StepDetail>(entity =>
        {
            entity.HasKey(e => e.StepId);

            entity.ToTable("StepDetail");

            entity.Property(e => e.StepId).ValueGeneratedNever();
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();

            entity.HasOne(d => d.Appointment).WithMany(p => p.StepDetails)
                .HasForeignKey(d => d.AppointmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StepDetail_Appointment");

            entity.HasOne(d => d.Step).WithOne(p => p.StepDetail)
                .HasForeignKey<StepDetail>(d => d.StepId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StepDetail_TreatmentStep");
        });

        modelBuilder.Entity<Treatment>(entity =>
        {
            entity.ToTable("Treatment");

            entity.Property(e => e.TreatmentName)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.ExpertField).WithMany(p => p.Treatments)
                .HasForeignKey(d => d.ExpertFieldId)
                .HasConstraintName("FK_Treatment_ExpertField");
        });

        modelBuilder.Entity<TreatmentBooking>(entity =>
        {
            entity.HasKey(e => e.BookingId);

            entity.ToTable("TreatmentBooking");

            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();

            entity.HasOne(d => d.Doctor).WithMany(p => p.TreatmentBookings)
                .HasForeignKey(d => d.DoctorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TreatmentBooking_Doctor");

            entity.HasOne(d => d.Patient).WithMany(p => p.TreatmentBookings)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TreatmentBooking_Patient");

            entity.HasOne(d => d.Treatment).WithMany(p => p.TreatmentBookings)
                .HasForeignKey(d => d.TreatmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TreatmentBooking_Treatment");
        });

        modelBuilder.Entity<TreatmentRecord>(entity =>
        {
            entity.HasKey(e => new { e.PatientId, e.BookingId });

            entity.ToTable("TreatmentRecord");

            entity.HasOne(d => d.Booking).WithMany(p => p.TreatmentRecords)
                .HasForeignKey(d => d.BookingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TreatmentRecord_TreatmentBooking");

            entity.HasOne(d => d.Patient).WithMany(p => p.TreatmentRecords)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TreatmentRecord_Patient");
        });

        modelBuilder.Entity<TreatmentStep>(entity =>
        {
            entity.HasKey(e => e.StepId);

            entity.ToTable("TreatmentStep");

            entity.HasOne(d => d.Treatment).WithMany(p => p.TreatmentSteps)
                .HasForeignKey(d => d.TreatmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TreatmentStep_Treatment");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(80);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.RefreshToken).HasMaxLength(512);
            entity.Property(e => e.RefreshTokenExpirity).HasColumnType("datetime");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_User_Role");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}